<?xml version="1.0" encoding="UTF-8"?>

<!--
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see http://www.gnu.org/licenses/
-->

<xwikidoc version="1.1">
  <web>PhenoTips</web>
  <name>Clinical Notes Annotation</name>
  <language/>
  <defaultLanguage/>
  <translation>0</translation>
  <creator>xwiki:XWiki.Admin</creator>
  <creationDate>1423071031000</creationDate>
  <parent>PhenoTips.WebHome</parent>
  <author>xwiki:XWiki.Admin</author>
  <contentAuthor>xwiki:XWiki.Admin</contentAuthor>
  <date>1430247533000</date>
  <contentUpdateDate>1430160031000</contentUpdateDate>
  <version>1.1</version>
  <title/>
  <comment/>
  <minorEdit>false</minorEdit>
  <syntaxId>xwiki/2.1</syntaxId>
  <hidden>false</hidden>
  <content/>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>0</number>
    <className>XWiki.JavaScriptExtension</className>
    <guid>6af38783-9e99-485a-9c3c-ffa658637525</guid>
    <class>
      <name>XWiki.JavaScriptExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
      <code>
document.observe('xwiki:dom:loaded', function() {

// global variables

/**
 * Suggestions that have been discarded or accepted.
 * Maps Term IDs to annotation objects
 */
var dismissedTerms = {};

/**
 * Unfiltered results of annotation by the annotationService.
 * Maps Term IDs to annotation objects
 */
var annotationServiceResults = {};

/**
 * List of suggestions that still haven't been displayed
 */
var suggestionBank = [];

/**
 * Suggestions that are currently displayed.
 * Maps Term IDs to annotation objects
 */
var currentSuggestions = {};

/**
 * True if the Dismissed XClass instance exists for this patient
 */
var existsDismissedSuggestionDataStore = false;

/**
 * The index of the first suggestion being displayed at the moment.
 */
var currentFirstSuggestion = 0;

/**
 * Number of suggestions to display in the UI
 */
var numSuggestionsToDisplay = 4;

/**
 * Text to be annotated
 */
var text = "";

/**
 * Container of the clinical notes annotation widget.
 */
var widgetContainer = new Element('div', {"id" : 'annotation-widget-container'});

/**
 * A refresh button.
 */
var refreshButton = new Element('span', {"id" : 'annotation-refresh', "class" : 'fa fa-refresh xHelpButton', 'aria-hidden': 'true'});

refreshButton.observe('click', function() {
  dismissedTerms = {};
  annotationServiceResults = {};
  suggestionBank = [];
  currentSuggestions = {};
  persistDismissed();
  updateAnnotations();
});

//generate initial UI elements
var panel = $$(".current-phenotype-selection")[0];
var suggestionSourcesIds = ['indication_for_referral', 'medical_history'];
var suggestionSources = $$('textarea[name$="' + suggestionSourcesIds.join('"], textarea[name$="') + '"]');
var _getSourceTexts = function() {
 return suggestionSources.pluck('value').join('.\n');
}
if (panel &amp;&amp; suggestionSources.size() &gt; 0) {
  var clinicalNotesSubPanel = 
    new Element('div', {"class" : "sub-panel"}).insert(
      new Element('h3', {"class" : "wikigeneratedheader"}).update(
        "&lt;span&gt;&lt;strong&gt;Suggestions from Clinical Notes&lt;/strong&gt;&lt;/span&gt;"
      ).insert(refreshButton)
    ).insert(widgetContainer);
  panel.insert({top : clinicalNotesSubPanel});

  // Init
  text = _getSourceTexts();
  fetchDismissedSuggestions(updateAnnotations);
  //listen for changes in indication for referral text box
  suggestionSources.invoke('observe', 'blur', function() {
    var newText = _getSourceTexts();
    if (newText != text) {
      text = newText;
      updateAnnotations();
    }
  });
}

/**
 * Update the currentSuggestions dictionary, populating it with suggestions from the suggestion
 * bank, then redrawing the UI
 */
function updateCurrentSuggestions() {
  currentSuggestions = {};
  var end = currentFirstSuggestion + numSuggestionsToDisplay;
  suggestionBank.slice(currentFirstSuggestion, end).forEach(function(suggestion, idx) {
    currentSuggestions[suggestion.id] = idx + currentFirstSuggestion;
  });
  drawSuggestionsUI();
}

/**
 * Queries server for annotations to the text, updates list of suggestions and
 * displays suggestions in the UI.
 */
function updateAnnotations() {
  /* This (resetting the currentFirstSuggestion) is gonna be a bit annoying if a user has advanced
   * some pages and then revises the text box, but unfortunately it's really the only way to be
   * sure we're not gonna paginate past the end. */
  currentFirstSuggestion = 0;
  if(text) {
    currentSuggestions = {};
    var queryString = '?outputSyntax=plain';
    new Ajax.Request(new XWiki.Document('AnnotationService', 'PhenoTips').getURL('get') + queryString,
    {
      parameters : {
        text : text
      },
      onCreate : function() {
        var loadingContainer = new Element('div', {'class' : 'loading-container'});
        var spinner = new Element('div', {
          'id' : 'suggestions-spinner',
          'class' : "fa fa-lg fa-spinner fa-spin"});
        var loadingLabel = new Element('div', {'id' : 'generating-suggestions-label'}).update("Generating Suggestions");
        loadingContainer.insert(spinner).insert(loadingLabel);
        widgetContainer.update(loadingContainer);
      },
      onSuccess : function(response) {
        annotationServiceResults = response.responseJSON.response;
        getExistingPhenotypes();
        populateSuggestionData();
      },
      onComplete : updateCurrentSuggestions
    });
  } else {
    annotationServiceResults = {};
    currentSuggestions = {};
    populateSuggestionData();
    drawSuggestionsUI();
  }
};

/**
 * Creates YesNoPicker element.
 * 
 * @param {Object} suggestion Annotation object with the fields: 'start', 'end', 'id' and 'label'.
 * @param {Element} suggestionElt UI Element of one suggestion.
 * @param {Element} categoryElt Hidden UI Element containing term categories.
 */
function generateYesNoPicker(suggestion, suggestionElt, categoryElt) {
  var phenotypePrefix = ($('prefix') &amp;&amp; $('prefix').value || '');
  var yesNoPicker = YesNoPicker.generatePickerElement(
    [
      {type: 'yes', name: phenotypePrefix + 'phenotype'},
      {type: 'no', name: phenotypePrefix + 'negative_phenotype'}
    ],
    suggestion.id,
    suggestion.label,
    true
  );

  var qsWidget = $('quick-phenotype-search');

  if(qsWidget &amp;&amp; qsWidget._suggestPicker) {
    yesNoPicker.select('.yes', '.no').invoke('observe', 'click', function(event) {
      var option = Event.findElement(event);
      var input = option.down('input[type="checkbox"]') || option.previous('.yes-no-picker').down('.yes input[type="checkbox"]'); // defaults to 'Y' when clicking on the text
      if (!input) {return;}
      if (input.checked) {
        var negative = option.hasClassName('no');
        var categoryClone = categoryElt.clone(true);
        if (negative) {
          categoryClone.insert(new Element('input', {type: 'hidden', name : 'fieldName', value : input.name}));
        }
        qsWidget._suggestPicker.silent = true;
        qsWidget._suggestPicker.acceptSuggestion({'id' : suggestion.id, 'value' : suggestion.label, 'category' : categoryClone, 'negative' : negative});
        qsWidget._suggestPicker.silent = false;
        new XWiki.widgets.Notification("$services.localization.render('phenotips.PatientSheetCode.added')".replace("__name__", suggestion.id), 'done');
        dismissSuggestion(suggestion.id, suggestionElt);
      } else {
        var existingValue = $(qsWidget.id + '_' + input.value);
        if (existingValue) {
          existingValue.checked = false;
          new XWiki.widgets.Notification("$services.localization.render('phenotips.PatientSheetCode.removed')".replace("__name__", suggestion.id), 'done');
        }
      }
    });
  }
  return yesNoPicker;
}

/**
 * Creates one suggestion element, with a yes-no-picker, label, quote and info tooltip.
 *
 * @param {Object} suggestion Annotation object with the fields: 'start', 'end', 'id' and 'label'.
 */
function generateSuggestionUIElement(suggestionIdx) {
  var suggestion = suggestionBank[suggestionIdx];
  var start = suggestion.startInSentence;
  var end = suggestion.endInSentence;
  var quoteStart = 0;
  var quoteEnd = text.length;
  var suggestionBox = new Element('div', {'class' : 'suggestion'});
  var termCategories = new Element("span", {"class" : "hidden term-category"});
  var sentence = suggestion.sentence;
  suggestion['term_category'].forEach(function(category) {
    termCategories.insert(
      new Element('input', {'type' : 'hidden', 'value' : category})
    );
  });
  var yesNoPicker = generateYesNoPicker(suggestion, suggestionBox, termCategories);
  var dismissButton = new Element('div', {'class' : 'hide-suggestion'}).update("✖");
  dismissButton.observe('click', function() {
    dismissSuggestion(suggestion.id, suggestionBox);
  });
  
  return suggestionBox.insert(
    new Element('div', {'class' : 'suggestion-headline'}).insert(
        yesNoPicker
      ).insert(
        new Element("span", {"class" : "suggestion-term"}).update(suggestion.label)
      ).insert(
        termCategories
      ).insert('&lt;span class="xHelpButton fa fa-info-circle phenotype-info" title="' + suggestion.id + '"&gt;&lt;/span&gt;')
  ).insert(
    new Element('div', {'class' : 'suggestion-quote'}).insert(
      "..." + sentence.substring(quoteStart, start)
    ).insert(
      new Element('span', {'class' : 'quoted-term'}).update(sentence.substring(start, end))
    ).insert(
      sentence.substring(end, quoteEnd) + "..."
    )
  ).insert(
    dismissButton
  );
}

/**
 * Queries server and updates list of previously dismissed or considered suggestions.
 *
 * @param {function} callback Will be invoked when the request is complete.
 */
function fetchDismissedSuggestions(callback) {
  new Ajax.Request(XWiki.currentDocument.getRestURL('objects/PhenoTips.DismissedSuggestionsClass/0/properties/terms'), {
    'method': 'get',
    'requestHeaders': {'Accept': 'application/json'},
    onSuccess: function(response) {
      dismissedTermsKeys = response.responseJSON.value.split('|');
      dismissedTermsKeys.forEach(function(termId) {
        dismissedTerms[termId] = true;
      });
      existsDismissedSuggestionDataStore = true;
    },
    onComplete: function(response) {
      callback();
    }
  });
};

/**
 * Send the list of dismissed suggestions to the server so they're remembered.
 */
function persistDismissed() {
  var delimitedDismissedTerms = Object.keys(dismissedTerms).join('|');
  var parameters = {
    'ajax': true,
    'form_token': $$("meta[name='form_token']")[0].content
  };
  if (existsDismissedSuggestionDataStore) {
    parameters['PhenoTips.DismissedSuggestionsClass_0_terms'] = delimitedDismissedTerms;
  } else {
    parameters['classname'] = 'PhenoTips.DismissedSuggestionsClass';
    parameters['PhenoTips.DismissedSuggestionsClass_terms'] = delimitedDismissedTerms;
  }
  new Ajax.Request(XWiki.currentDocument.getURL((existsDismissedSuggestionDataStore ? 'save' : 'objectadd')), {
    'parameters': parameters,
    onSuccess : function() {
      existsDismissedSuggestionDataStore = true;
    }
  });
}

/**
 * Add term with termId to list of dismissed suggestions and update the dismissed
 * suggestions on the server.
 *
 * @param {string} termId Ontology ID of the phenotype term.
 * @param {Element} suggestionElt UI Element of one suggestion.
 */
function dismissSuggestion(termId, suggestionElt) {
  dismissedTerms[termId] = true;
  persistDismissed();
  //var nextSuggestion = popNextSuggestion();
  var deletedIdx = currentSuggestions[termId];
  delete currentSuggestions[termId];
  suggestionBank.splice(deletedIdx, 1);
  Object.keys(currentSuggestions).forEach(function(key) {
    if (currentSuggestions[key] > deletedIdx) {
      currentSuggestions[key] -= 1;
    }
  });
  var nextIdx = currentFirstSuggestion + numSuggestionsToDisplay - 1;

  if(nextIdx &lt; suggestionBank.length) {
    var nextSuggestion = suggestionBank[nextIdx];
    currentSuggestions[nextSuggestion.id] = nextIdx;
    suggestionElt.replace(generateSuggestionUIElement(nextIdx));
    Event.fire(document, 'xwiki:dom:updated', {'elements' : [suggestionElt]});
  } else {
    suggestionElt.remove();
  }
  updateSuggestionCount();
};

/**
 * Returns a list of phenotypes already added for this patient.
 */
function getExistingPhenotypes() {
  listedTerms = {};
  $$(".yes-no-picker").each(function(element) {
    var yesInput = element.down('.yes input');
    var noInput = element.down('.no input');
    if (yesInput.name === noInput.name) {
      // Not a phenotype
      return;
    }
    var key = yesInput.value;
    var existing = listedTerms[key];
    var enable = element.down('.na input') &amp;&amp; !element.down('.na input').checked;
    if (!enable) {
      // not listed phenotype
      return;
    }
    if (!existing) {
      listedTerms[key] = true;
    }
  });
  return listedTerms;
};

/**
 * Generates suggestion list from annotations, but filtering out
 * dismissed and existing phenotypes.
 */
function populateSuggestionData() {
  suggestionBank = [];
  var listedTerms = getExistingPhenotypes();
  Object.keys(annotationServiceResults).forEach(function(termId) {
    if (!listedTerms[termId] &amp;&amp; !dismissedTerms[termId]) {
      suggestionBank.push(annotationServiceResults[termId]);
    }
  });
};

/**
 * Removes the next numSuggestions of suggestions from suggestionBank and returns them.
 * @param {Number} numSuggestions The number of suggestions to remove.
 */
function popSuggestions(numSuggestions) {
  var suggestionsToDisplay = [];
  var limit = Math.min(numSuggestions, suggestionBank.length);
  for (var i = 0; i &lt; limit; i++) {
    suggestionsToDisplay.push(suggestionBank.shift());
  }
  return suggestionsToDisplay;
};

/**
 * Removes the next suggestion from suggestionBank and returns it.
 */
function popNextSuggestion() {
  var suggestionList = popSuggestions(1);
  if (suggestionList.length != 1) {
    return null;
  }
  return suggestionList[0];
}

/**
 * Clears the UI and draws all the elements.
 */
function drawSuggestionsUI() {
  var suggestionsContainer = new Element('div', {'id' : 'suggestions-container'});
  widgetContainer.update(suggestionsContainer);



  //scrap what exists, create UI from 4 first elements in suggestions
  var suggestionBoxes = [];
  Object.keys(currentSuggestions).forEach(function(termId) {
    suggestionBoxes.push(generateSuggestionUIElement(currentSuggestions[termId]));
  });

  //draw suggestion boxes
  var suggestionList = new Element('ul', {"class" : "suggestions-list"});
  suggestionBoxes.forEach(function(suggestion) {
    suggestionList.insert(
      new Element('li', {"class" : "suggestion-list-item"}).insert(suggestion)
    )
  });
  suggestionsContainer.update(suggestionList);
  Event.fire(document, 'xwiki:dom:updated', {'elements' : [suggestionsContainer]});

  //show progress counter
  widgetContainer.insert(new Element("div", {"id" : "suggestion-count"}));

  if (currentFirstSuggestion &gt; 0) {
    suggestionsContainer.insert({'top': new Element('span', {'class': 'fa fa-chevron-left navigation'}).observe('click', function() {
      var prevPage = currentFirstSuggestion - numSuggestionsToDisplay;
      currentFirstSuggestion = Math.max(prevPage, 0);
      updateCurrentSuggestions();
    }).insert(new Element('input', {"value": "1", "type": "hidden"}))});
  }


  if ((currentFirstSuggestion + numSuggestionsToDisplay) &lt; suggestionBank.length) {
    suggestionsContainer.insert(new Element('span', {'class': 'fa fa-chevron-right navigation'}).observe('click', function() {
      var nextPage = currentFirstSuggestion + numSuggestionsToDisplay;
      currentFirstSuggestion = Math.min(nextPage, suggestionBank.length - numSuggestionsToDisplay);
      currentFirstSuggestion = Math.max(currentFirstSuggestion, 0);
      updateCurrentSuggestions();
    }).insert(new Element('input', {"value": "2", "type": "hidden"})));
  }

  updateSuggestionCount();
};

/**
 * Updates the UI element that shows the progress of going through suggestions.
 */
function updateSuggestionCount() {
  var numCurrentSuggestions = Object.keys(currentSuggestions).length;
  var numTotalSuggestions = suggestionBank.length;
  var end = currentFirstSuggestion + numCurrentSuggestions;
  /* Arrays are 0 indexed, but users are not. */
  var start = currentFirstSuggestion + 1;
  if(numTotalSuggestions &gt; 0) {
    $("suggestion-count").update(start + " to " + end + " of " + numTotalSuggestions + " suggestions");
  } else {
    $("suggestion-count").update("No suggestions to display");
  }
}
});
      </code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>onDemand</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>0</number>
    <className>XWiki.StyleSheetExtension</className>
    <guid>8468027f-2638-489a-a4b8-d8a909d851f2</guid>
    <class>
      <name>XWiki.StyleSheetExtension</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <cache>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>cache</name>
        <number>5</number>
        <prettyName>Caching policy</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>long|short|default|forbid</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </cache>
      <code>
        <disabled>0</disabled>
        <name>code</name>
        <number>2</number>
        <prettyName>Code</prettyName>
        <rows>20</rows>
        <size>50</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </code>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>1</number>
        <prettyName>Name</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parse>
        <disabled>0</disabled>
        <displayFormType>select</displayFormType>
        <displayType>yesno</displayType>
        <name>parse</name>
        <number>4</number>
        <prettyName>Parse content</prettyName>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.BooleanClass</classType>
      </parse>
      <use>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>use</name>
        <number>3</number>
        <prettyName>Use this extension</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>currentPage=Always on this page|onDemand=On demand|always=Always on this wiki</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </use>
    </class>
    <property>
      <cache>forbid</cache>
    </property>
    <property>
        <code>#template("colorThemeInit.vm")

.loading-container {
  text-align: center;
  margin: 1em;
}

.loading-container #generating-suggestions-label {
  margin: 1em;
}

#suggestions-container {
  padding-top: 0.8em;
  -webkit-column-count: 2; /* Chrome, Safari, Opera */
  -moz-column-count: 2; /* Firefox */
  column-count: 2;
  display: table;
}
#suggestions-container .suggestions-list {
  margin: 0 2em 0 2em;
}

#suggestions-container .suggestion-list-item {
  list-style-type: none;
  display: table-cell;
  float: left;
  width: 50%;
}

#suggestions-container .suggestion {
  margin: 0 1.0em 1.7em;
  position: relative;
  -webkit-column-break-inside: avoid;
  -moz-column-break-inside: avoid;
  -o-column-break-inside: avoid;
  column-break-inside: avoid;
  display: table;
  height: 5em;
}

#suggestions-container .yes-no-picker {
margin: 0;
}

#suggestions-container .suggestion-term {
  font-weight: bold;
  margin: 0 .4em;
}

#suggestions-container .suggestion-quote {
  margin-top: .4em;
  font-style: italic;
}

#suggestions-container .quoted-term {
  background-color: yellow;
  font-style: normal;
}

#suggestions-container .hide-suggestion {
  position: absolute;
  top: 0;
  right: 0;
  cursor: pointer;
}

#annotation-refresh {
  float: right;
}

#suggestion-count {
  text-align: center;
  margin-bottom: 1em;
  }

#suggestions-container &gt; ul {
  padding-bottom: 0.3em;
  padding-left: 1em;
  width: 90%;
}

#suggestions-container &gt; * {
  display: table-cell;
  vertical-align: middle;
}

#suggestions-container &gt; span {
  text-align: center;
}

#suggestions-container &gt; .navigation:hover {
  background-color: rgba(0,0,0,0.1);
  color: $theme.linkColor;
  cursor: pointer;
  transition: all 0.2s linear;
}</code>
    </property>
    <property>
      <name/>
    </property>
    <property>
      <parse>1</parse>
    </property>
    <property>
      <use>currentPage</use>
    </property>
  </object>
  <object>
    <name>PhenoTips.Clinical Notes Annotation</name>
    <number>0</number>
    <className>XWiki.UIExtensionClass</className>
    <guid>a8efe7b6-6399-436e-8f71-a27dce8382a0</guid>
    <class>
      <name>XWiki.UIExtensionClass</name>
      <customClass/>
      <customMapping/>
      <defaultViewSheet/>
      <defaultEditSheet/>
      <defaultWeb/>
      <nameField/>
      <validationScript/>
      <content>
        <disabled>0</disabled>
        <name>content</name>
        <number>3</number>
        <prettyName>Extension Content</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </content>
      <extensionPointId>
        <disabled>0</disabled>
        <name>extensionPointId</name>
        <number>1</number>
        <prettyName>Extension Point ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </extensionPointId>
      <name>
        <disabled>0</disabled>
        <name>name</name>
        <number>2</number>
        <prettyName>Extension ID</prettyName>
        <size>30</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.StringClass</classType>
      </name>
      <parameters>
        <disabled>0</disabled>
        <name>parameters</name>
        <number>4</number>
        <prettyName>Extension Parameters</prettyName>
        <rows>10</rows>
        <size>40</size>
        <unmodifiable>0</unmodifiable>
        <classType>com.xpn.xwiki.objects.classes.TextAreaClass</classType>
      </parameters>
      <scope>
        <cache>0</cache>
        <disabled>0</disabled>
        <displayType>select</displayType>
        <multiSelect>0</multiSelect>
        <name>scope</name>
        <number>5</number>
        <prettyName>Extension Scope</prettyName>
        <relationalStorage>0</relationalStorage>
        <separator> </separator>
        <separators> ,|</separators>
        <size>1</size>
        <unmodifiable>0</unmodifiable>
        <values>wiki=Current Wiki|user=Current User|global=Global</values>
        <classType>com.xpn.xwiki.objects.classes.StaticListClass</classType>
      </scope>
    </class>
    <property>
      <content>{{velocity}}
$xwiki.ssx.use('PhenoTips.Clinical Notes Annotation', {'colorTheme' : "$xwiki.getSpacePreference('colorTheme')"})##
$xwiki.jsx.use('PhenoTips.Clinical Notes Annotation')##</content>
    </property>
    <property>
      <extensionPointId>org.phenotips.patientSheet.section.phenotype-info</extensionPointId>
    </property>
    <property>
      <name>org.phenotips.patientSheet.field.phenotype-suggestion</name>
    </property>
    <property>
      <parameters>title=Phenotype Suggestions Extracted from Clinical Notes
enabled=true
required=
order=2
fields=</parameters>
    </property>
    <property>
      <scope>wiki</scope>
    </property>
  </object>
</xwikidoc>
